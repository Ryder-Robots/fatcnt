#ifndef ENVIRONMENTPROCESSOR_HPP
#define ENVIRONMENTPROCESSOR_HPP

#include <vector>
#include <boost/program_options.hpp>
#include <nlohmann/json.hpp>
#include <dlib/logger.h>
#include <fatcnt/environment/environment.hpp>
#include <fatcnt/exceptions/exceptions.hpp>
#include <fatcnt/environment/processorbase.hpp>

using namespace std;
using json = nlohmann::json;


/**
 * TODO: THis may need to be obsoleted.
 */
namespace rrobot {
    class EnviromentProcessor :  ProcessorBase {
        public:

            /**
             * @fn createEnvironment
             * @brief
             * Creates environment, 
             *     - environment variables override manifest settings
             *     - command line options override environment variables
             */
            static Environment createEnvironment(json manifest)  {

                HwModel hwModel = createHwModel(manifest);
                RrSerial mc = createMc(manifest);
                RrVersion version;
                Queues queues = createQueues(manifest);
                Server server = createServer(manifest);
                Logging logging = createLogging(manifest);
                EaiTrainingData training_data = createAiTrainingData(manifest);
            
                return Environment(hwModel, mc, version, queues, server, logging, training_data);
            }
            
            static Environment* createEnvironmentRef(json manifest) {

                HwModel hwModel = createHwModel(manifest);
                RrSerial mc = createMc(manifest);
                RrVersion version;
                Queues queues = createQueues(manifest);
                Server server = createServer(manifest);
                Logging logging = createLogging(manifest);
                EaiTrainingData training_data = createAiTrainingData(manifest);
            
                return new Environment(hwModel, mc, version, queues, server, logging, training_data);
            }            

            /**
             * @fn getObject
             * @brief
             * when implemented method allows for robot specific variables to be set. The object returned is not directly 
             * injected into environment objects.
             */
            virtual void getObject(json manifest, void* object) {}
        

            // Common vairables that are used ditrectly by fat controller are defined here.
            static HwModel  createHwModel(json manifest) {
                std::vector<string> keys = {"multitype", "mspversion", "capability"};
                verify(manifest, keys, "hwmodel");
            
                VALID_MULTITYPE_KEYS_INIT;
                VALID_MSP_VERSION_KEYS_INIT;
            
                MULTITYPE_T multiType = VALID_MULTITYPE_KEYS.at(manifest["hwmodel"]["multitype"]);
                MSP_VERSION mspVersion = VALID_MSP_VERSION_KEYS.at(manifest["hwmodel"]["mspversion"]);
                uint32_t capability = static_cast<uint32_t>(manifest["hwmodel"]["capability"]);
            
                return HwModel(multiType, mspVersion, capability);
            }

            static RrSerial createMc(json manifest) {
                std::vector<string> keys = {"port", "baud", "charsize", "flow_control", "stop_bits", "parity"};
                verify(manifest, keys, "mc");
            
                VALID_BAUDRATES_INIT;
                VALID_CHAR_SZ_INIT;
                VALID_FLOW_CNT_INIT;
                VALID_STOPBIT_INIT;
                VALID_PARITY_INIT;
            
                LibSerial::BaudRate baudRate = VALID_BAUDRATES.at(manifest["mc"]["baud"]);
                LibSerial::CharacterSize charsize = VALID_CHAR_SZ.at(manifest["mc"]["charsize"]);
                LibSerial::FlowControl flowControl = VALID_FLOW_CNT.at(manifest["mc"]["flow_control"]);
                LibSerial::StopBits stopBits = VALID_STOPBIT.at(manifest["mc"]["stop_bits"]);
                LibSerial::Parity parity = VALID_PARITY.at(manifest["mc"]["parity"]);
            
                return RrSerial(manifest["mc"]["port"], baudRate, charsize, flowControl, stopBits, parity);
            }

            static Queues   createQueues(json manifest) {
                std::vector<string> keys = {"limit", "thread_wait_time", "thread_process_time", "thread_time_out"};
                verify(manifest, keys, "queues");
                return Queues(manifest["queues"]["limit"], 
                    manifest["queues"]["thread_wait_time"],  
                    manifest["queues"]["thread_process_time"],
                    manifest["queues"]["thread_time_out"]);
            }

            static Server   createServer(json manifest) {
                std::vector<string> keys = {"port", "maxconnections"};
                verify(manifest, keys, "server");
                return Server(manifest["server"]["port"], manifest["server"]["maxconnections"]);
            }

            static Logging  createLogging(json manifest) {
                std::vector<string> keys = {"logLevel"};
                verify(manifest, keys, "logging");
            
                VALID_LOGLEVELS;
                dlib::log_level logLevel = VALID_LOGLEVELS_KEYS.at(manifest["logging"]["logLevel"]);
                return Logging(logLevel);
            }

            static EaiTrainingData createAiTrainingData(json manifest) {
                std::vector<string> keys = {"data", "batch_size", "queue_fc", "queue_mc"};
                verify(manifest, keys, "ai_training_data");
                VALID_RRP_QUEUES_INIT;
                return EaiTrainingData(
                    manifest["ai_training_data"]["data"],
                    manifest["ai_training_data"]["batch_size"],
                    VALID_RRP_QUEUES_KEYS.at(manifest["ai_training_data"]["queue_fc"]),
                    VALID_RRP_QUEUES_KEYS.at(manifest["ai_training_data"]["queue_mc"])
                );
            }

    };
}

#endif // ENVIRONMENTPROCESSOR_HPP