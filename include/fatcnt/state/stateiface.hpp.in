#ifndef STATEIFACE_HPP
#define STATEIFACE_HPP

#include <fatcnt/state/rrqueues.hpp>
#include <fatcnt/protocols/common/mspsensors.hpp>
#include <fatcnt/events/catagorizer/cmodes.hpp>

namespace rrobot {
/**
 * @class StateIface
 * @brief
 * Virtual interface state variable. Allows state to be passed in as a variable
 */
class StateIface {
   public:
    /**
     * @fn getQueues
     * @brief
     * returns queues object see \ref fatcnt/state/rrqueues.hpp
     */
    virtual RrQueues* getQueues() {return nullptr;}

    /**
     * @fn isRunning
     * @brief
     * returns true when the application is running, otherwise return false.
     */
    virtual bool isRunning() {return false;}

    /**
     * @fn getCycleTime
     * @brief
     * see \ref http://www.multiwii.com/wiki/index.php?title=Multiwii_Serial_Protocol refers to
     * how long the controller has spent in its main loop. For drones that do not use a flight 
     * or micro-processor, this value can be returned as '0' which is the default.
     */
    virtual uint16_t getCycleTime() {return 0;}

    /**
     * @fn getErrorCount
     * @brief
     * gets count of all errors that have occrued.
     */
    virtual uint16_t getErrorCount() {return 0;}

    /**
     * @fn getSensors
     * @brief
     * indicates what sensors are available on the drone, 
     * The following format is used:
     * 
     * BARO<<1|MAG<<2|GPS<<3|SONAR<<4|CAMERA<<5
     */
    virtual uint16_t getSensors() {return 0;}

    /**
     * @fn 
     */
    virtual RR_CMMODES getMode() {return RR_CMMODES::CMODE_NOT_SET;}

    /**
     * @fn setIsRunning
     * @brief
     * when set to true, then the application is considered to be running, when application
     * is to be shutdown then set to false.
     */
    virtual void setIsRunning(bool isrunning) = 0;

    /**
     * @fn setCycleTime()
     * @brief
     * called by the handler that communicates with the micro-process or flight controller, for drones
     * that have both a micro-processor, and flight controller. The value is set by the handler that controls
     * the flight controller.
     */
    virtual void setCycleTime(uint16_t cycleTime) {}

    /**
     * @fn incremementErrorCount
     * @brief
     * when an exception is thrown the hanlder will call this function to incremement the erorr count 
     * by 1.
     */
    virtual void incremementErrorCount() {}

    /**
     * @fn setSensorFlag
     * @brief
     * Adds an available sensor.
     */
    virtual void setSensorFlag(MSPSENSOR_FLAGS flag) {}

    /**
     * @fn setMode
     * @brief
     * sets the current mode of the drone.
     */
    virtual void setMode(RR_CMMODES mode){}
};
}  // namespace rrobot

#endif  // STATEIFACE_HPP