#ifndef RMMULTIWII_HPP
#define RMMULTIWII_HPP

#include <stdint.h>

#include <fatcnt/protocols/rmultiwii/crc.hpp>
#include <fatcnt/protocols/common/mspcommands.hpp>

namespace rrobot {

/**
 * @class RmMultiWii
 *
 * @brief
 * encodes uint8_t array based upon the following specification.
 *
 * | element    | position      | type      | byte offset | optional |
 * | ---------- | ------------- | --------  | ----------  | -------- |
 * | command    | 0             | uint8_t   | 1           | no       |
 * | size       | 1, 2          | uint16_t  | 2           | no       |
 * | crc        | 3, 4, 5, 6    | uint32_t  | 4           | no       |
 * | data       | 6             | uint8_t*  | 0 to n      | yes      |
 * | term       | n + 1         | uint8_t*  | 1           | no       |
 */
class RmMultiWii {
   public:
    /**
     * @fn RmMultiWii
     * @brief
     * construct object based upon inbound data recieved.
     *
     */
    // TODO needs to compute CRC and termination character.
    RmMultiWii(MSPCOMMANDS cmd, uint16_t sz) : _cmd(cmd), _sz(sz) {}

    /**
     * @fn createInstance
     * @brief
     * Creates object instance baased upon inbound data recieved from external source.
     */
    static RmMultiWii createInstance(uint8_t* data, Crc32 crc);

    /**
     * @fn getCommand()
     * @brief
     * Returns command.
     */
    MSPCOMMANDS getCommand() { return _cmd;}

    /**
     * @fn getSize()
     * @brief
     * Returns byte size of object. This excludes headers termination etc.
     */
    uint16_t getSize() {return _sz;}

    /**
     * @fn setPayload
     * @brief
     * sets payload if one exists.
     */
    void setPayload(uint8_t *payload) {_payload = payload;}

    /**
     * @fn getPayload()
     * @brief
     * returns payload.
     */
    uint8_t* getPayload() {return _payload;}

    /**
     * @fn encode
     * @brief
     * encodes object.
     */
    uint8_t* encode(Crc32 crc);

   private:
    MSPCOMMANDS _cmd;
    uint16_t _sz;
    uint8_t* _payload;

    const uint8_t _TERMINATION_CHAR =  0x1E;
};
}  // namespace rrobot

#endif